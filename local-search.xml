<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker安装Nacos连接Mysql（单机版）</title>
    <link href="/2020/11/25/2020-11-25-Docker%E5%AE%89%E8%A3%85Nacos%E8%BF%9E%E6%8E%A5Mysql%EF%BC%88%E5%8D%95%E6%9C%BA%E7%89%88%EF%BC%89/"/>
    <url>/2020/11/25/2020-11-25-Docker%E5%AE%89%E8%A3%85Nacos%E8%BF%9E%E6%8E%A5Mysql%EF%BC%88%E5%8D%95%E6%9C%BA%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker安装Nacos连接Mysql（单机版）"><a href="#Docker安装Nacos连接Mysql（单机版）" class="headerlink" title="Docker安装Nacos连接Mysql（单机版）"></a>Docker安装Nacos连接Mysql（单机版）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上尝试过N种Docker安装nacos的方法，不是无法成功启动就是无法正确加载配置文件。使用一般的docker run的方式连接mysql以后，nacos成功启动，但无法读取数据库的数据和写入数据。排查原因，发现应该是数据库连接未成功。</p><h2 id="docker-run方式"><a href="#docker-run方式" class="headerlink" title="docker run方式"></a>docker run方式</h2><blockquote><p>操作环境：</p><p>CentOS 7.4</p><p>MySQL 5.7</p></blockquote><h3 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1. 拉取镜像"></a>1. 拉取镜像</h3><pre><code class="hljs shell">docker pull nacos/nacos-server</code></pre><h3 id="2-安装MySQL"><a href="#2-安装MySQL" class="headerlink" title="2. 安装MySQL"></a>2. 安装MySQL</h3><p>笔者使用了docker的方式已安装了mysql5.7，安装方法请参考。</p><h3 id="3-初始化数据库"><a href="#3-初始化数据库" class="headerlink" title="3. 初始化数据库"></a>3. 初始化数据库</h3><p>创建存储nacos配置的数据库</p><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> nacos</code></pre><p>导入数据库初始化文件</p><p><a href="https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql">nacos-db.sql</a></p><h3 id="4-创建nacos容器"><a href="#4-创建nacos容器" class="headerlink" title="4. 创建nacos容器"></a>4. 创建nacos容器</h3><pre><code class="hljs shell">docker run -d \-e PREFER_HOST_MODE=hostname \-e MODE=standalone \-e SPRING_DATASOURCE_PLATFORM=mysql \-e MYSQL_MASTER_SERVICE_HOST=数据库ip \-e MYSQL_MASTER_SERVICE_PORT=数据库端口 \-e MYSQL_MASTER_SERVICE_USER=用户名 \-e MYSQL_MASTER_SERVICE_PASSWORD=密码 \-e MYSQL_MASTER_SERVICE_DB_NAME=对应的数据库名 \-e MYSQL_SLAVE_SERVICE_HOST=从数据库ip \-p 8848:8848 \--name nacos \--restart=always \nacos/nacos-server</code></pre><p>具体配置参数参考<a href="https://nacos.io/zh-cn/docs/quick-start-docker.html">官方文档</a>，这里有个注意的是<code>MYSQL_SLAVE_SERVICE_HOST</code>也需要配置，因为通过查看<code>nacos</code>容器内的<code>config/application.properties</code>文件，会发现这此值未设置默认值，所以会导致启动报错，容器启动不起来，这里可以与主数据库一致。</p><p>至此，docker run方式启动nacos结束。</p><p>这里会遇到几个坑：</p><pre><code class="hljs shell">SPRING_DATASOURCE_PLATFORM=mysql</code></pre><p>配置<code>mysql</code>的话，浏览器访问会打不开</p><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>:<span class="hljs-number">8848</span>/nacos</code></pre><p>进入容器查看日志</p><pre><code class="hljs shell">docker exec -it nacos bashtail -200f /home/nacos/logs/nacos.log</code></pre><p>发现有数据库连接未配置的报错</p><p>这里需要修改``SPRING_DATASOURCE_PLATFORM=mysql`为空，就可以正常启动了。这可能是nacos一个BUG。</p><pre><code class="hljs shell">SPRING_DATASOURCE_PLATFORM=</code></pre><h3 id="5-测试nacos"><a href="#5-测试nacos" class="headerlink" title="5. 测试nacos"></a>5. 测试nacos</h3><p>浏览器访问<code>ip:8848/nacos</code></p><p>登录后添加配置等都成功，但在数据库里并没有实际增加数据。多次尝试都失败，这个方法不知道是否可以解决。</p><h2 id="docker-compose方式解决问题"><a href="#docker-compose方式解决问题" class="headerlink" title="docker compose方式解决问题"></a>docker compose方式解决问题</h2><p>在上述方法，尝试了修改配置文件和启动加载配置都失败后，我们尝试使用其他方式启动容器。</p><blockquote><p>操作环境：</p><p>CentOS 7.4</p><p>MySQL 5.7</p></blockquote><h2 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker compose安装"></a>docker compose安装</h2><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> curl -L https://github.com/docker/compose/releases/download/1.8.0/run.sh &gt; /usr/<span class="hljs-built_in">local</span>/bin/docker-compose</span><span class="hljs-meta">$</span><span class="bash"> chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose</span><span class="hljs-meta">$</span><span class="bash"> docker-compose --version</span></code></pre><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>按上述方法配置同样的mysql5.7数据库，并初始化数据库</p><h3 id="下载nacos项目"><a href="#下载nacos项目" class="headerlink" title="下载nacos项目"></a>下载nacos项目</h3><pre><code class="hljs shell">git clone https://github.com/nacos-group/nacos-docker.gitcd nacos-docker</code></pre><p>下载后nacos-docker目录结构如下</p><pre><code class="hljs shell">nacos-docker/├── build│   ├── bin│   │   └── docker-startup.sh│   ├── conf│   │   └── application.properties│   ├── Dockerfile│   └── init.d│       └── custom.properties├── changlog├── env│   ├── mysql.env│   ├── nacos-embedded.env│   ├── nacos-hostname.env│   ├── nacos-ip.env│   └── nacos-standlone-mysql.env├── example│   ├── cluster-embedded.yaml│   ├── cluster-hostname.yaml│   ├── cluster-ip.yaml│   ├── init.d│   │   └── custom.properties│   ├── prometheus│   │   ├── prometheus-cluster.yaml│   │   └── prometheus-standalone.yaml│   ├── standalone-derby.yaml│   ├── standalone-logs│   │   ├── access_log.2020-11-25.log│   │   ├── alipay-jraft.log│   │   ├── cmdb-main.log│   │   ├── config-client-request.log│   │   ├── config-dump.log│   │   ├── config-fatal.log│   │   ├── config-memory.log│   │   ├── config-notify.log│   │   ├── config-pull-check.log│   │   ├── config-pull.log│   │   ├── config-server.log│   │   ├── config-trace.log│   │   ├── core-auth.log│   │   ├── istio-main.log│   │   ├── nacos-address.log│   │   ├── nacos-cluster.log│   │   ├── nacos_gc.log.0.current│   │   ├── nacos.log│   │   ├── naming-distro.log│   │   ├── naming-event.log│   │   ├── naming-performance.log│   │   ├── naming-push.log│   │   ├── naming-raft.log│   │   ├── naming-rt.log│   │   ├── naming-server.log│   │   ├── protocol-distro.log│   │   ├── protocol-raft.log│   │   └── start.out│   ├── standalone-mysql-5.7.yaml│   └── standalone-mysql-8.yaml├── README.md└── README_ZH.md</code></pre><ul><li>build中是项目的具体文件，代码等</li></ul><ul><li>env中是环境文件，具体的环境配置就在这里</li><li>example中是官方的一些默认的yaml文件，在使用docker-compose中会用到</li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>进入example文件夹，可以看到<code>standalone-mysql-5.7.yaml</code>这个配置文件</p><pre><code class="hljs apache"><span class="hljs-attribute">vim</span> standalone-mysql-<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.yaml</code></pre><p>可以看到官方配置文件中同时会生成<code>nacos</code>、<code>mysql</code>、<code>prometheus</code>、<code>grafana</code>这几个容器，这里我们已经有配置好的mysql可以使用，那其他几个容器我们都用不到。所有直接把depends_on和后面的所有代码全部注释，当然如果想让它自动重启，可以不注释<code> restart: always</code>。</p><ul><li>env_file下指向的文件就是待会启动时，<code>standalone-mysql-8.yaml</code>所引用的环境文件，待会也要修改那个文件</li></ul><ul><li>volumes下的两个文件就是配置目录挂载，如果熟悉docker的话，也可以换个地方挂载，当然custom.properties文件要拷过去</li></ul><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">nacos:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:latest</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-standalone-mysql</span>    <span class="hljs-attr">env_file:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">../env/nacos-standlone-mysql.env</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./standalone-logs/:/home/nacos/logs</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./init.d/custom.properties:/home/nacos/init.d/custom.properties</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8848:8848&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9555:9555&quot;</span>  <span class="hljs-comment">#  depends_on:</span>  <span class="hljs-comment">#    - mysql</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>  <span class="hljs-comment">#mysql:</span>  <span class="hljs-comment">#  container_name: mysql</span>  <span class="hljs-comment">#  image: nacos/nacos-mysql:5.7</span>  <span class="hljs-comment">#  env_file:</span>  <span class="hljs-comment">#    - ../env/mysql.env</span>  <span class="hljs-comment">#  volumes:</span>  <span class="hljs-comment">#    - ./mysql:/var/lib/mysql</span>  <span class="hljs-comment">#  ports:</span>  <span class="hljs-comment">#    - &quot;3306:3306&quot;</span>  <span class="hljs-comment">#prometheus:</span>  <span class="hljs-comment">#  container_name: prometheus</span>  <span class="hljs-comment">#  image: prom/prometheus:latest</span>  <span class="hljs-comment">#  volumes:</span>  <span class="hljs-comment">#    - ./prometheus/prometheus-standalone.yaml:/etc/prometheus/prometheus.yml</span>  <span class="hljs-comment">#  ports:</span>  <span class="hljs-comment">#    - &quot;9090:9090&quot;</span>  <span class="hljs-comment">#  depends_on:</span>  <span class="hljs-comment">#    - nacos</span>  <span class="hljs-comment">#  restart: on-failure</span>  <span class="hljs-comment">#grafana:</span>  <span class="hljs-comment">#  container_name: grafana</span>  <span class="hljs-comment">#  image: grafana/grafana:latest</span>  <span class="hljs-comment">#  ports:</span>  <span class="hljs-comment">#    - 3000:3000</span>  <span class="hljs-comment">#  restart: on-failure</span></code></pre><h3 id="修改env文件"><a href="#修改env文件" class="headerlink" title="修改env文件"></a>修改env文件</h3><pre><code class="hljs shell">cd envvim nacos-standlone-mysql.env</code></pre><p>将之前配置的数据库信息填入配置文件中</p><pre><code class="hljs shell">PREFER_HOST_MODE=mysqlMODE=standaloneSPRING_DATASOURCE_PLATFORM=mysqlMYSQL_SERVICE_HOST=ipMYSQL_SERVICE_DB_NAME=nacosMYSQL_SERVICE_PORT=3306MYSQL_SERVICE_USER=rootMYSQL_SERVICE_PASSWORD=root</code></pre><h3 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h3><pre><code class="hljs shell">cd ..docker-compose -f example/standalone-mysql-5.7.yaml up -d</code></pre><p>等启动完成后，ip:8848/nacos访问即可。</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统搭建Hexo博客</title>
    <link href="/2020/11/23/Linux%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/11/23/Linux%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>Hello,Test<br><img src="https://raw.githubusercontent.com/sugar1112/img/main/oyZPXfRaXyY.jpg" alt="Testpic"></p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Linux</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/11/22/hello-world/"/>
    <url>/2020/11/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
